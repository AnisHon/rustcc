translation-unit = { external-declaration } ;
external-declaration = function-definition | declaration ;

identifier = IDENTIFIER ;
constant = INTEGER_CONSTANT | FLOAT_CONSTANT | CHAR_CONSTANT ;
string-literal = STRING_LITERAL ;

primary-expression =
      identifier
    | constant
    | string-literal
    | "(" expression ")" ;

postfix-expression =
      primary-expression
    | postfix-expression "[" expression "]"
    | postfix-expression "(" [ argument-expression-list ] ")"
    | postfix-expression "." identifier
    | postfix-expression "->" identifier
    | postfix-expression "++"
    | postfix-expression "--" ;

argument-expression-list =
      assignment-expression { "," assignment-expression } ;

unary-expression =
      postfix-expression
    | "++" unary-expression
    | "--" unary-expression
    | unary-operator cast-expression
    | "sizeof" unary-expression
    | "sizeof" "(" type-name ")" ;

unary-operator = "&" | "*" | "+" | "-" | "~" | "!" ;

cast-expression =
      unary-expression
    | "(" type-name ")" cast-expression ;

multiplicative-expression =
      cast-expression { ("*" | "/" | "%") cast-expression } ;

additive-expression =
      multiplicative-expression { ("+" | "-") multiplicative-expression } ;

shift-expression =
      additive-expression { ("<<" | ">>") additive-expression } ;

relational-expression =
      shift-expression { ("<" | ">" | "<=" | ">=") shift-expression } ;

equality-expression =
      relational-expression { ("==" | "!=") relational-expression } ;

and-expression =
      equality-expression { "&" equality-expression } ;

exclusive-or-expression =
      and-expression { "^" and-expression } ;

inclusive-or-expression =
      exclusive-or-expression { "|" exclusive-or-expression } ;

logical-and-expression =
      inclusive-or-expression { "&&" inclusive-or-expression } ;

logical-or-expression =
      logical-and-expression { "||" logical-and-expression } ;

conditional-expression =
      logical-or-expression [ "?" expression ":" conditional-expression ] ;

assignment-expression =
      conditional-expression
    | unary-expression assignment-operator assignment-expression ;

assignment-operator = "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ;

expression =
      assignment-expression { "," assignment-expression } ;