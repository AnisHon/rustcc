{%- match decl_code -%}
    {%- when Some(x) -%}
    {{ x }}
    {%- when None -%}
{%- endmatch -%}

pub const INIT_STATE: usize = {{ init_state }};

static CHAR_CLASS: [(u32, u32); {{ ranges_sz }}] = {{ ranges }};

static CHAR_CLASS_MAP: [usize; {{ class_map_sz }}] = {{ class_map }};

static ASCII_MAPPING: [usize; {{ ascii_map_sz }}] = {{ ascii_map }};

static BASE: [Option<usize>; {{ base_sz }}] = {{ base }};

static NEXT: [usize; {{ next_sz }}] = {{ next }};

static CHECK: [Option<usize>; {{ check_sz }}] = {{ check }};

static ROW_ID: [usize; {{ row_id_sz }}] = {{ row_id }};

///
/// get next state
/// # returns
/// -`Option<usize>`
///     - `None`: no translation, Error(in classic DFA)
///     - `Some`: next state
pub fn find_next(state_id: usize, chr: char) -> Option<usize> {
    let row_id = ROW_ID[state_id];
    let class_id = find_char(chr);
    let base = BASE[row_id]?;

    let idx = base + class_id;
    let check = CHECK[idx]?;

    if check == row_id {
        Some(NEXT[idx])
    } else {
        None
    }
}

fn find_char(chr: char) -> usize {
    let idx = find_idx(chr);
    CHAR_CLASS_MAP[idx]
}

fn find_idx(chr: char) -> usize {
    if chr.is_ascii() {
        // fast path
        ASCII_MAPPING[chr as usize]
    } else {
        // slow path
        binary_search(chr as u32)
    }
}

/// 二分查找
fn binary_search(chr: u32) -> usize {
    let ranges = &CHAR_CLASS;
    let mut idx_left = 0;
    let mut idx_right = ranges.len() - 1; // 左闭右闭

    while idx_left <= idx_right {
        let idx_mid = (idx_left + idx_right) / 2;
        let (l, r) = ranges[idx_mid];

        if l <= chr && chr <= r {
            return idx_mid;
        }

        if l < chr {
            idx_left = idx_mid + 1;
        } else {
            idx_right = idx_mid - 1;
        }
    }

    // not in ranges
    unreachable!("Not Find {}", chr)
}

/// execute action, return results
pub fn exec_action(
    state: usize,
    {% for item in params %}
    {{ item }},
    {%- endfor %}
) -> Option<{{ typ }}> {
    match state {
        {%- for (id, action) in actions %}
        {{ id }} => {{ action }}
        {%- endfor %}
        _ => {}
    }
    None
}

{% match user_code %}
    {%- when Some(x) -%}
    {{ x }}
    {%- when None -%}
{% endmatch %}