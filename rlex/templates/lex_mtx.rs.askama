{%- match decl_code -%}
    {%- when Some(x) -%}
    {{ x }}
    {%- when None -%}
{%- endmatch -%}

pub const INIT_STATE: usize = {{ init_state }};

static BASE: [Option<usize>; {{ base_sz }}] = {{ base }};

static NEXT: [usize; {{ next_sz }}] = {{ next }};

static CHECK: [Option<usize>; {{ check_sz }}] = {{ check }};

static ROW_ID: [usize; {{ row_id_sz }}] = {{ row_id }};

pub static STATES: [Option<{{ typ }}>; {{ actions.len() }}] = [
{%- for action in actions -%}
{%- match action -%}
    {%- when Some(x) %}
    Some({{ x }})
    {%- when None %}
    None
{%- endmatch -%},
{%- endfor %}
];


pub fn find_next(state_id: usize, chr: char) -> Option<usize> {
    let row_id = ROW_ID[state_id];
    let class_id = chr as usize;
    let base = BASE[row_id]?;

    let idx = base + class_id;
    let check = CHECK[idx]?;

    if check == row_id {
        Some(NEXT[idx])
    } else {
        None
    }
}

