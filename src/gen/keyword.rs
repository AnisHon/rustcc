pub const INIT_STATE: usize = 38;

static BASE: [Option<usize>; 173] = [
    None, Some(147), Some(0), Some(0), Some(146), Some(164), Some(162), Some(160), Some(149), Some(156), 
    Some(152), Some(26), Some(152), Some(5), Some(150), Some(35), Some(151), Some(144), Some(12), Some(151), 
    Some(31), Some(135), Some(134), Some(39), Some(148), Some(10), Some(26), Some(132), Some(18), Some(135), 
    Some(149), Some(124), Some(26), Some(136), Some(146), Some(137), Some(130), Some(137), Some(19), 
    Some(125), Some(123), Some(136), Some(131), Some(124), Some(119), Some(116), Some(124), Some(120), 
    Some(118), Some(115), Some(114), Some(130), Some(116), Some(115), Some(113), Some(118), Some(117), 
    Some(105), Some(2), Some(109), Some(110), Some(107), Some(107), Some(119), Some(114), Some(103), 
    Some(96), Some(96), Some(110), Some(99), Some(99), Some(107), Some(102), Some(98), Some(88), Some(88), 
    Some(106), Some(91), Some(91), Some(27), Some(99), Some(94), Some(82), Some(80), Some(76), Some(74), 
    Some(93), Some(79), Some(81), Some(84), Some(74), Some(92), Some(87), Some(73), Some(71), Some(88), 
    Some(68), Some(82), Some(65), Some(65), Some(72), Some(78), Some(70), Some(76), Some(67), Some(65), 
    Some(58), Some(59), Some(58), Some(60), Some(69), Some(59), Some(65), Some(53), Some(65), Some(49), 
    Some(65), Some(53), Some(48), Some(45), Some(60), Some(57), Some(57), Some(46), Some(46), Some(56), 
    Some(38), Some(53), Some(47), Some(48), Some(39), Some(46), Some(46), Some(45), Some(43), Some(3), 
    Some(2), Some(1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, 
    None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 
    None, None, None, None, 
];

static NEXT: [usize; 265] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    94, 96, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 
    80, 84, 46, 114, 53, 55, 78, 17, 93, 108, 170, 89, 100, 67, 169, 73, 91, 106, 48, 66, 113, 112, 47, 
    75, 58, 39, 129, 77, 92, 101, 45, 44, 159, 130, 82, 102, 131, 90, 18, 56, 97, 26, 104, 168, 70, 143, 
    111, 2, 3, 4, 164, 76, 5, 6, 7, 161, 118, 8, 9, 157, 156, 155, 10, 11, 12, 152, 13, 150, 14, 148, 
    15, 16, 145, 19, 20, 21, 140, 22, 23, 24, 25, 136, 27, 134, 28, 132, 29, 30, 128, 127, 31, 32, 124, 
    123, 33, 34, 120, 119, 35, 36, 162, 41, 151, 42, 61, 50, 110, 171, 135, 54, 105, 60, 98, 65, 126, 
    99, 153, 85, 142, 122, 63, 52, 69, 71, 74, 79, 87, 88, 147, 133, 109, 154, 103, 115, 165, 121, 125, 
    62, 57, 117, 158, 138, 116, 107, 68, 51, 72, 0, 83, 141, 81, 149, 167, 144, 49, 1, 64, 43, 160, 172, 
    146, 86, 59, 166, 163, 137, 139, 40, 
];

static CHECK: [Option<usize>; 265] = [
    None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 
    None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 
    None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 
    None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, Some(2), 
    Some(2), None, None, None, None, None, Some(2), None, None, None, None, None, None, None, None, None, 
    None, None, None, None, None, None, None, None, None, None, None, None, Some(3), None, Some(3), Some(3), 
    Some(3), Some(3), Some(3), Some(3), Some(3), Some(58), Some(3), Some(137), Some(136), Some(3), Some(13), 
    Some(13), Some(135), Some(58), Some(25), Some(3), Some(3), Some(3), Some(3), Some(3), Some(3), Some(18), 
    Some(13), Some(18), Some(11), Some(13), Some(25), Some(25), Some(38), Some(79), Some(32), Some(11), 
    Some(26), Some(18), Some(28), Some(28), Some(38), Some(23), Some(11), Some(79), Some(20), Some(15), 
    Some(26), Some(20), Some(15), Some(134), Some(133), Some(132), Some(131), Some(32), Some(130), Some(129), 
    Some(128), Some(127), Some(23), Some(126), Some(125), Some(124), Some(123), Some(122), Some(121), 
    Some(120), Some(119), Some(118), Some(117), Some(116), Some(115), Some(114), Some(113), Some(112), 
    Some(111), Some(110), Some(109), Some(108), Some(107), Some(106), Some(105), Some(104), Some(103), 
    Some(102), Some(101), Some(100), Some(99), Some(98), Some(97), Some(96), Some(95), Some(94), Some(93), 
    Some(92), Some(91), Some(90), Some(89), Some(88), Some(87), Some(86), Some(85), Some(84), Some(83), 
    Some(82), Some(81), Some(80), Some(78), Some(77), Some(76), Some(75), Some(74), Some(73), Some(72), 
    Some(71), Some(70), Some(69), Some(68), Some(67), Some(66), Some(65), Some(64), Some(63), Some(62), 
    Some(61), Some(60), Some(59), Some(57), Some(56), Some(55), Some(54), Some(53), Some(52), Some(51), 
    Some(50), Some(49), Some(48), Some(47), Some(46), Some(45), Some(44), Some(43), Some(42), Some(41), 
    Some(40), Some(39), Some(37), Some(36), Some(35), Some(34), Some(33), Some(31), Some(30), Some(29), 
    Some(27), Some(24), Some(22), Some(21), Some(19), Some(17), Some(16), Some(14), Some(12), Some(10), 
    Some(9), Some(8), Some(7), Some(6), Some(5), Some(4), Some(1), 
];

static ROW_ID: [usize; 173] = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 
    51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 
    76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 
    101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 
    121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 
];

pub static STATES: [Option<Keyword>; 173] = [
    Some(Bool),
    Some(While),
    Some(Volatile),
    Some(Void),
    Some(Unsigned),
    Some(Union),
    Some(Typedef),
    Some(Switch),
    Some(Struct),
    Some(Sizeof),
    Some(Short),
    Some(Signed),
    Some(Return),
    Some(Restrict),
    Some(Register),
    Some(Long),
    Some(Int),
    Some(If),
    Some(Int),
    Some(Inline),
    Some(Goto),
    Some(For),
    Some(Float),
    Some(Extern),
    Some(Enum),
    Some(Else),
    Some(Do),
    Some(Double),
    Some(Default),
    Some(Continue),
    Some(Const),
    Some(Char),
    Some(Case),
    Some(Break),
    Some(Auto),
    Some(Complex),
    Some(Complex),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
];


pub fn find_next(state_id: usize, chr: char) -> Option<usize> {
    let row_id = ROW_ID[state_id];
    let class_id = chr as usize;
    let base = BASE[row_id]?;

    let idx = base + class_id;
    let check = CHECK[idx]?;

    if check == row_id {
        Some(NEXT[idx])
    } else {
        None
    }
}
